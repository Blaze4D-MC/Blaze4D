buildscript {
    dependencies {
        classpath("org.kohsuke:github-api:1.114")
    }
}

plugins {
    id("fabric-loom") version "0.9-SNAPSHOT"
    id("maven-publish")
    id("signing")
    id("com.modrinth.minotaur") version "1.1.0"
    id("com.matthewprenger.cursegradle") version "1.4.0"
    id("io.github.juuxel.loom-quiltflower") version "1.1.1"
}

loomQuiltflower {
    quiltflowerVersion.set("1.5.0")
}

import org.gradle.internal.os.OperatingSystem

project.ext.lwjglVersion = "3.3.0-SNAPSHOT"

switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                : "natives-linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
        break
    case OperatingSystem.WINDOWS:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.contains("64")
                ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                : "natives-windows-x86"
        break
}

archives_base_name = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven {
        url = "https://jitpack.io"
    }
    maven {
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

ext.changelog = ""

tasks.withType(Sign) {
    onlyIf { project.hasProperty("sign") }
}

if (project.hasProperty("sign")) {
    signing {
        useGpgCmd()
        sign configurations.archives
    }
}

loom {
    accessWidener("src/main/resources/blaze4d.aw")
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-shaderc"
    implementation "org.lwjgl:lwjgl-stb"
    implementation "org.lwjgl:lwjgl-vma"
    implementation "org.lwjgl:lwjgl-vulkan"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-shaderc::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-vma::$lwjglNatives"
    if (lwjglNatives == "natives-macos" || lwjglNatives == "natives-macos-arm64") runtimeOnly "org.lwjgl:lwjgl-vulkan::$lwjglNatives"

    implementation("org.joml:joml:1.10.1")
    implementation("it.unimi.dsi:fastutil:8.5.4")
    implementation("com.google.code.gson:gson:2.8.7")

    implementation project(':Rosella')
    implementation project(':Aftermath')
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 16
}

java {
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

artifacts {
    archives jar, sourcesJar
}

curseforge {
    if (System.getenv("CURSE_API_KEY") != null) {
        apiKey = System.getenv("CURSE_API_KEY")
        project {
            id = project.curseforge_id
            releaseType = "release"
            project.game_versions.split(",").each { String game_version -> addGameVersion game_version }
            addGameVersion "Fabric"

            changelogType = "html"
            changelog = project.ext.changelog
            mainArtifact(remapJar.archivePath) {
                displayName = "Blaze4D - $rootProject.mod_version"
            }
            afterEvaluate {
                uploadTask.dependsOn("build")
            }
        }
    }
    options {
        forgeGradleIntegration = false
        javaVersionAutoDetect = false
    }
}

import com.modrinth.minotaur.TaskModrinthUpload
import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

task publishToModrinth(type: TaskModrinthUpload) {
    token = System.getenv("MODRINTH_TOKEN") // Use an environment property!
    projectId = project.modrinth_id
    versionNumber = project.version
    uploadFile = remapJar.archivePath // This is the java jar task
    changelog = project.ext.changelog
    project.game_versions.split(",").each { String game_version -> addGameVersion(game_version) }
    addLoader("fabric")
}

task github {
    onlyIf {
        System.getenv().GITHUB_TOKEN
    }

    doLast {
        def github = GitHub.connectUsingOAuth(System.getenv().GITHUB_TOKEN as String)
        def repository = github.getRepository("hYdos/Blaze4D")

        def releaseBuilder = new GHReleaseBuilder(repository, project.mod_version)
        releaseBuilder.name("$project.project_name $project.mod_version for $project.minecraft_version")
        releaseBuilder.body(project.ext.changelog)
        releaseBuilder.commitish("master")

        def ghRelease = releaseBuilder.create()
        ghRelease.uploadAsset(file("${project.rootDir}/build/libs/${archivesBaseName}-${version}.jar"), "application/java-archive");
    }
}

task generateChangelog {
    def changelogFile = file("CHANGELOG.md")
    def contents = ""
    changelogFile.withReader { reader ->
        def line
        while ((line = reader.readLine()) != null)
            contents += line + "\n"
    }

    def changelogs = contents.split("----")
    project.ext.changelog = changelogs.find { log -> log.contains(project.version) }
    println project.ext.changelog
}
